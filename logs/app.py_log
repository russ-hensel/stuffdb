2025-04-17 15:25:32,020 - CRITICAL - Root logger is set up. Modules can now log using logging.getLogger().
2025-04-17 15:25:32,021 - INFO - config_logger call was: logging.info
2025-04-17 15:25:32,022 - DEBUG - QsqlDbAccess  init_db()
2025-04-17 15:25:32,026 - DEBUG - connection_name = 'qt_sql_default_connection'
2025-04-17 15:25:32,111 - Notice - 
2025-04-17 15:25:32,111 - Notice - ============================
2025-04-17 15:25:32,111 - Notice - 
2025-04-17 15:25:32,111 - Notice - Application: Stuff DB in QT Ver 70: 2025 04 09.01 in mode mode_github_example_code_on_theprofand version  Ver 70: 2025 04 09.01
2025-04-17 15:25:32,111 - Notice - 
2025-04-17 15:25:32,111 - Notice - command line arg + 0  =  main.py)
2025-04-17 15:25:32,111 - Notice - command line arg + 1  =  mode_github_example_code_on_theprof)
2025-04-17 15:25:32,111 - Notice - current directory /mnt/WIN_D/for_github/stuffdb
2025-04-17 15:25:32,111 - Notice - Time now: 2025-04-17 19:25:32
2025-04-17 15:25:32,111 - DEBUG - self.q_app.exec_() next
2025-04-17 15:25:34,853 - DEBUG - set_size_pos--------------------------------------  
2025-04-17 15:25:34,856 - DEBUG - init end DetailTabBase DetailTabBase -- >> tab failed to set<<< and...   
2025-04-17 15:25:34,860 - DEBUG - init end DetailTabBase DetailTabBase -- >> tab failed to set<<< and...   
2025-04-17 15:25:34,861 - DEBUG - post_init DetailTabBase  HelpDetailTab  
2025-04-17 15:25:34,865 - ERROR - ------------------------ monkey_patch_here re-examine this--------------------------
2025-04-17 15:25:41,369 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "shutil", "move" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 2  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-17 15:25:41,373 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "shutil", "move" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 2  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-17 15:25:47,360 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "file" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 1  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-17 15:25:47,377 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "file" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 1  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-17 15:26:04,149 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "file", "move" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 2  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-17 15:26:04,152 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "file", "move" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 2  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-17 15:26:07,634 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-17 15:26:07,634 - DEBUG - update_db record null no action, return help_info
2025-04-17 15:26:07,635 - DEBUG - update_db record null no action, return help_text
2025-04-17 15:26:07,635 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-17 15:26:07,635 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-17 15:26:07,637 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-17 15:26:07,638 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-17 15:26:07,638 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-17 15:26:25,125 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-17 15:26:25,125 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-17 15:26:25,475 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_info' 
2025-04-17 15:26:25,476 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-17 15:26:25,476 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-17 15:26:25,477 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_text' 
2025-04-17 15:26:25,477 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-17 15:26:25,477 - DEBUG - DocumentBase new_record first validate, then save, wait for except then go on save removed 
2025-04-17 15:26:25,478 - DEBUG - new_record change self.detail_tab.default_new_row( next_key ) 
2025-04-17 15:26:25,478 - DEBUG - Detail_Tab_Base new_record next_key = None   option ='default' update.db
2025-04-17 15:26:25,478 - DEBUG - DataManager new_record    help_info  should we create the record here ??
2025-04-17 15:26:25,558 - DEBUG - DataManager new_record time stuff may be lost  self.table_name = 'help_info' 
2025-04-17 15:26:25,558 - DEBUG - new_record need to fix up the picture tab if any or does document do it ??
2025-04-17 15:26:25,558 - DEBUG - DataManager new_record    help_text  should we create the record here ??
2025-04-17 15:26:25,559 - DEBUG - DataManager new_record time stuff may be lost  self.table_name = 'help_text' 
2025-04-17 15:26:25,559 - DEBUG - new_record need to fix up the picture tab if any or does document do it ??
2025-04-17 15:26:25,559 - DEBUG - Detail_Tab_Base clear out sub tabs?? !!
2025-04-17 15:30:41,437 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-17 15:30:41,437 - Level 25 - document_manager update_new_record_v3  self.table_name  = 'help_info' 
2025-04-17 15:30:41,438 - Level 25 - 
Info About >>>> update_new_record_v3 after filter to empty 
object is instance of <class 'PyQt5.QtSql.QSqlTableModel'> and type <class 'PyQt5.QtSql.QSqlTableModel'>
>>>>>>>>>>    ><PyQt5.QtSql.QSqlTableModel object at 0x7f34d619ea80><
custom_info for a QSqlTableModel 
    tableName()         = help_info
    rowCount()          = 0
    database().databaseName()          = /mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/data/python_ex.db
    model.isDirty()     = False
    model.filter()      = id = 8713
    rows....
    For a record .. anything new here -- columns differ 
    ix_col = 0:     new_record.fieldName( ix_col ) = 'id' 
    ix_col = 1:     new_record.fieldName( ix_col ) = 'id_old' 
    ix_col = 2:     new_record.fieldName( ix_col ) = 'type' 
    ix_col = 3:     new_record.fieldName( ix_col ) = 'sub_system' 
    ix_col = 4:     new_record.fieldName( ix_col ) = 'system' 
    ix_col = 5:     new_record.fieldName( ix_col ) = 'key_words' 
    ix_col = 6:     new_record.fieldName( ix_col ) = 'edit_ts' 
    ix_col = 7:     new_record.fieldName( ix_col ) = 'table_name' 
    ix_col = 8:     new_record.fieldName( ix_col ) = 'column_name' 
    ix_col = 9:     new_record.fieldName( ix_col ) = 'java_type' 
    ix_col = 10:     new_record.fieldName( ix_col ) = 'java_name' 
    ix_col = 11:     new_record.fieldName( ix_col ) = 'java_package' 
    ix_col = 12:     new_record.fieldName( ix_col ) = 'title' 
    ix_col = 13:     new_record.fieldName( ix_col ) = 'is_example' 
    ix_col = 14:     new_record.fieldName( ix_col ) = 'can_execute' 
    i_name = 'id':  new_record.indexOf( i_name ) = 0 
    i_name = 'id_old':  new_record.indexOf( i_name ) = 1 
    i_name = 'type':  new_record.indexOf( i_name ) = 2 
    i_name = 'sub_system':  new_record.indexOf( i_name ) = 3 
    i_name = 'system':  new_record.indexOf( i_name ) = 4 
    i_name = 'key_words':  new_record.indexOf( i_name ) = 5 
    i_name = 'edit_ts':  new_record.indexOf( i_name ) = 6 
    i_name = 'table_name':  new_record.indexOf( i_name ) = 7 
    i_name = 'column_name':  new_record.indexOf( i_name ) = 8 
    i_name = 'java_type':  new_record.indexOf( i_name ) = 9 
    i_name = 'java_name':  new_record.indexOf( i_name ) = 10 
    i_name = 'java_package':  new_record.indexOf( i_name ) = 11 
    i_name = 'title':  new_record.indexOf( i_name ) = 12 
    i_name = 'is_example':  new_record.indexOf( i_name ) = 13 
    i_name = 'can_execute':  new_record.indexOf( i_name ) = 14 
2025-04-17 15:30:41,438 - Level 25 - update_new_record_v3 prior to insertRecord {model.rowCount() = } 
2025-04-17 15:30:41,521 - Level 25 - update_new_record_v3 post to insertRecord {model.rowCount() = } 
2025-04-17 15:30:41,521 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_new_record_v3   self.current_id = 8713 self.table_name = 'help_info' self.record_state = 2
2025-04-17 15:30:41,521 - Level 25 - 
update_new_record_v3 at very end 
2025-04-17 15:30:41,854 - Level 25 - document_manager update_new_record_v3  self.table_name  = 'help_text' 
2025-04-17 15:30:41,855 - Level 25 - 
Info About >>>> update_new_record_v3 after filter to empty 
object is instance of <class 'PyQt5.QtSql.QSqlTableModel'> and type <class 'PyQt5.QtSql.QSqlTableModel'>
>>>>>>>>>>    ><PyQt5.QtSql.QSqlTableModel object at 0x7f34d619eb10><
custom_info for a QSqlTableModel 
    tableName()         = help_text
    rowCount()          = 0
    database().databaseName()          = /mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/data/python_ex.db
    model.isDirty()     = False
    model.filter()      = id = 8713
    rows....
    For a record .. anything new here -- columns differ 
    ix_col = 0:     new_record.fieldName( ix_col ) = 'id' 
    ix_col = 1:     new_record.fieldName( ix_col ) = 'id_old' 
    ix_col = 2:     new_record.fieldName( ix_col ) = 'text_data' 
    i_name = 'id':  new_record.indexOf( i_name ) = 0 
    i_name = 'id_old':  new_record.indexOf( i_name ) = 1 
    i_name = 'text_data':  new_record.indexOf( i_name ) = 2 
2025-04-17 15:30:41,855 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-17 15:30:41,855 - Level 25 - update_new_record_v3 prior to insertRecord {model.rowCount() = } 
2025-04-17 15:30:41,928 - Level 25 - update_new_record_v3 post to insertRecord {model.rowCount() = } 
2025-04-17 15:30:41,929 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_new_record_v3   self.current_id = 8713 self.table_name = 'help_text' self.record_state = 2
2025-04-17 15:30:41,930 - Level 25 - 
update_new_record_v3 at very end 
2025-04-17 15:30:41,930 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-17 15:31:02,595 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-17 15:31:02,596 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-17 15:31:02,600 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-17 15:31:02,604 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-17 15:31:02,604 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-17 15:31:02,672 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-17 15:31:02,672 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:23:25,356 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "path" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 1  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-18 09:23:25,358 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "path" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 1  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-18 09:23:39,658 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:23:39,659 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:23:39,660 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 09:23:39,661 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:23:39,661 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:23:39,662 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 09:23:39,662 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:23:39,662 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:23:39,665 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:23:39,665 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:23:39,665 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:23:49,020 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:23:49,020 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:23:49,086 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8470' self.table_name = 'help_info' 
2025-04-18 09:23:49,149 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:23:49,149 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:23:49,150 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8470' self.table_name = 'help_text' 
2025-04-18 09:23:49,150 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:23:56,796 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:23:56,796 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:23:56,797 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8470' self.table_name = 'help_info' 
2025-04-18 09:23:56,798 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:23:56,798 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:23:56,798 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8470' self.table_name = 'help_text' 
2025-04-18 09:23:56,798 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:23:56,798 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:23:56,800 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:23:56,800 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:23:56,800 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:24:04,435 - DEBUG - ['>>Py create file path from a string file_name, and see parts and more', '', 'from   pathlib import Path', '', 'file_name    = "./picture_document.py"', '', 'file_path      = Path( file_name )', 'print( f"file_path   = {file_path}" )', '', 'print( f"\\nfile_path_suffix   = {file_path.suffix}" )', '', 'print( f"\\nfile_path.stem   = {file_path.stem}" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', 'print( f"\\nCurrent dir file_path.resolve = {  Path( \'./\' ).resolve()   }" )']
2025-04-18 09:24:04,435 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:26:18,152 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', '', 'from   pathlib import Path', '', 'file_name    = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path              = Path( file_name )', 'print( f"file_path   = {file_path}" )', '', 'print( f"\\nfile_path_suffix   = {file_path.suffix}" )', '', 'print( f"\\nfile_path.stem   = {file_path.stem}" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', 'print( f"\\nCurrent dir file_path.resolve = {  Path( \'./\' ).resolve()   }" )']
2025-04-18 09:26:18,153 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:32:17,597 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', '', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path              = Path( file_name )', 'print( f"file_path   = {file_path}" )', '', 'print( f"\\nfile_path_suffix   = {file_path.suffix}" )', '', 'print( f"\\nfile_path.stem   = {file_path.stem}" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:32:17,597 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:35:50,991 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path              = Path( file_name )', 'print( f"path_file_name   = {Path( file_name ) = }" )', '', 'print( f"\\nfile_path_suffix   = {file_path.suffix}" )', '', 'print( f"\\nfile_path.stem   = {file_path.stem}" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:35:50,992 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:37:01,993 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }" )', '', 'print( f"\\npath_suffix           = {file_path.suffix = }" )', '', 'print( f"\\nfile_path.stem   = {file_path.stem}" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:37:01,994 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:38:16,121 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }" )', '', 'print( "\\npath_suffix same as extension" )', 'print( f"\\npath_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( f"\\nfile_path.stem   = {file_path.stem}" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:38:16,121 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:39:55,679 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }" )', '', 'print( "\\npath_suffix same as extension" )', 'print( f"\\npath_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as extension" )', 'print( f"\\nfile_path.stem   = {file_path.stem = }"               {type(file_path.stem.suffix) }" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:39:55,680 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:40:18,295 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }" )', '', 'print( "\\npath_suffix same as extension" )', 'print( f"\\npath_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as " )', 'print( f"\\nfile_path.stem   = {file_path.stem = }"               {type(file_path.stem.suffix) }" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:40:18,296 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:40:43,943 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }" )', '', 'print( "\\npath_suffix same as extension" )', 'print( f"\\npath_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as " )', 'print( f"\\nfile_path.stem   = {file_path.stem = }               {type(file_path.stem.suffix) }" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:40:43,943 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:41:46,562 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension" )', 'print( f"\\npath_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as " )', 'print( f"\\nfile_path.stem   = {file_path.stem = }               {type(file_path.stem.suffix) }" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:41:46,563 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:42:11,901 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension" )', 'print( f"\\npath_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as " )', 'print( f"\\nfile_path.stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:42:11,902 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:43:20,474 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension" )', 'print( f"\\npath_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\npath_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:43:20,474 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:43:44,316 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\npath_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\npath_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( f"\\nfile_path.name = {  file_path.name   }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:43:44,316 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:44:52,874 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "helper", "py" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 2  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-18 09:44:52,876 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "helper", "py" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 2  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-18 09:44:55,247 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:44:55,247 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:44:55,315 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 09:44:55,452 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:44:55,452 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:44:55,525 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 09:44:55,527 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:44:55,528 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:44:55,534 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:44:55,534 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:44:55,535 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:45:31,402 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:31,402 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:31,406 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_info' 
2025-04-18 09:45:31,409 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:31,410 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:31,475 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_text' 
2025-04-18 09:45:31,475 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:34,479 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:34,479 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:34,480 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_info' 
2025-04-18 09:45:34,481 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:34,481 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:34,481 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_text' 
2025-04-18 09:45:34,482 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:34,482 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:45:34,484 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:45:34,485 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:45:34,485 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:45:43,901 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:43,902 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:43,903 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_info' 
2025-04-18 09:45:43,903 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:43,903 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:43,904 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_text' 
2025-04-18 09:45:43,904 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:43,904 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:45:43,905 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:45:43,905 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:45:43,906 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:45:45,495 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:45,495 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:45,496 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8470' self.table_name = 'help_info' 
2025-04-18 09:45:45,498 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:45,498 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:45,498 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8470' self.table_name = 'help_text' 
2025-04-18 09:45:45,498 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:45,498 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:45:45,500 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:45:45,500 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:45:45,500 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:45:45,501 - DEBUG - frecord_to_table found row 3 in future update maybe for now skip adding by return 
2025-04-18 09:45:46,841 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:46,842 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:46,844 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_info' 
2025-04-18 09:45:46,846 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:46,846 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:46,847 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_text' 
2025-04-18 09:45:46,848 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:46,848 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:45:46,852 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:45:46,852 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:45:46,852 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:45:46,852 - DEBUG - frecord_to_table found row 3 in future update maybe for now skip adding by return 
2025-04-18 09:45:48,195 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:48,196 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:48,199 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_info' 
2025-04-18 09:45:48,200 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:48,201 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:48,201 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_text' 
2025-04-18 09:45:48,202 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:48,202 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:45:48,205 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:45:48,205 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:45:48,205 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:45:48,205 - DEBUG - frecord_to_table found row 3 in future update maybe for now skip adding by return 
2025-04-18 09:45:48,797 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:48,797 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:48,798 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_info' 
2025-04-18 09:45:48,799 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:48,799 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:48,799 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_text' 
2025-04-18 09:45:48,800 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:48,800 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:45:48,801 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:45:48,801 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:45:48,802 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:45:48,802 - DEBUG - frecord_to_table found row 3 in future update maybe for now skip adding by return 
2025-04-18 09:45:49,293 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:49,293 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:49,295 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_info' 
2025-04-18 09:45:49,297 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:49,297 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:49,297 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_text' 
2025-04-18 09:45:49,298 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:49,298 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:45:49,301 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:45:49,301 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:45:49,301 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:45:49,301 - DEBUG - frecord_to_table found row 3 in future update maybe for now skip adding by return 
2025-04-18 09:45:52,345 - DEBUG - set_history_to_detail_ix  new_list_ix = 0 
2025-04-18 09:45:52,345 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:52,345 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:52,346 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_info' 
2025-04-18 09:45:52,347 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:52,347 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:52,347 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8703' self.table_name = 'help_text' 
2025-04-18 09:45:52,348 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:52,348 - DEBUG - next_history_to_detail  try to get db_key  new_list_ix = 0,  id_data = 8018
2025-04-18 09:45:52,348 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:45:52,351 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:45:52,352 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:45:52,352 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:45:56,639 - DEBUG - set_history_to_detail_ix  new_list_ix = -1 
2025-04-18 09:45:56,639 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:56,640 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:56,641 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_info' 
2025-04-18 09:45:56,642 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:45:56,642 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:45:56,642 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_text' 
2025-04-18 09:45:56,642 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:45:56,642 - DEBUG - new_history_ix no_rows = 4 new_list_ix = 0 tired to index before start
2025-04-18 09:45:56,643 - DEBUG - next_history_to_detail  try to get db_key  new_list_ix = 0,  id_data = 8018
2025-04-18 09:45:56,643 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:45:56,647 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:45:56,648 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:45:56,648 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:46:00,365 - DEBUG - set_history_to_detail_ix  new_list_ix = -1 
2025-04-18 09:46:00,365 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:46:00,366 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:46:00,367 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_info' 
2025-04-18 09:46:00,367 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:46:00,367 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:46:00,368 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_text' 
2025-04-18 09:46:00,368 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:46:00,368 - DEBUG - new_history_ix no_rows = 4 new_list_ix = 0 tired to index before start
2025-04-18 09:46:00,368 - DEBUG - next_history_to_detail  try to get db_key  new_list_ix = 0,  id_data = 8018
2025-04-18 09:46:00,368 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:46:00,373 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:46:00,373 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:46:00,373 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:46:03,458 - DEBUG - set_history_to_detail_ix  new_list_ix = -1 
2025-04-18 09:46:03,458 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:46:03,459 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:46:03,462 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_info' 
2025-04-18 09:46:03,464 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:46:03,465 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:46:03,466 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_text' 
2025-04-18 09:46:03,467 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:46:03,467 - DEBUG - new_history_ix no_rows = 4 new_list_ix = 0 tired to index before start
2025-04-18 09:46:03,468 - DEBUG - next_history_to_detail  try to get db_key  new_list_ix = 0,  id_data = 8018
2025-04-18 09:46:03,468 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:46:03,484 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:46:03,485 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:46:03,485 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:46:08,295 - DEBUG - set_history_to_detail_ix  new_list_ix = -1 
2025-04-18 09:46:08,295 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:46:08,296 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:46:08,296 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_info' 
2025-04-18 09:46:08,297 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:46:08,297 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:46:08,297 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_text' 
2025-04-18 09:46:08,298 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:46:08,298 - DEBUG - new_history_ix no_rows = 4 new_list_ix = 0 tired to index before start
2025-04-18 09:46:08,298 - DEBUG - next_history_to_detail  try to get db_key  new_list_ix = 0,  id_data = 8018
2025-04-18 09:46:08,298 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:46:08,302 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:46:08,303 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:46:08,303 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:46:14,389 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "path" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 1  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-18 09:46:14,398 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "path" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 1  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-18 09:46:21,042 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:46:21,043 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:46:21,046 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_info' 
2025-04-18 09:46:21,050 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 09:46:21,050 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 09:46:21,051 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_text' 
2025-04-18 09:46:21,052 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 09:46:21,053 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 09:46:21,064 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 09:46:21,064 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 09:46:21,065 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 09:46:21,069 - DEBUG - frecord_to_table found row 2 in future update maybe for now skip adding by return 
2025-04-18 09:46:33,454 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\file_path.name = {  file_path.name   }              {type(file_path.suffix) }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:46:33,455 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:48:01,075 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\path_name same as base or short name without extension" )', 'print( f"\\path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( f"\\nfile_path.anchor = {  file_path.anchor   }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:48:01,075 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:49:58,040 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\path_name is stem plus the extension: the full base or short name" )', 'print( f"\\path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\path_anchor is ...." )', 'print( f"\\nfile_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:49:58,041 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:50:23,756 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\path_name is stem plus the extension: the full base or short name" )', 'print( f"\\path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\path_anchor is ....not sure" )', 'print( f"\\nfile_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( f"\\nfile_path.resolve = {  file_path.resolve()   }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:50:23,757 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:51:39,699 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\path_name is stem plus the extension: the full base or short name" )', 'print( f"\\path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\path_anchor is ....not sure" )', 'print( f"\\file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', '', 'print( "\\path_resolve is ....not sure" )', 'print( f"\\npath_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:51:39,699 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:51:53,493 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\path_name is stem plus the extension: the full base or short name" )', 'print( f"\\path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\path_anchor is ....not sure" )', 'print( f"\\file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', '', 'print( "\\path_resolve is ....not sure" )', 'print( f"\\npath_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:51:53,494 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:52:08,611 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\path_name is stem plus the extension: the full base or short name" )', 'print( f"\\path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\path_anchor is ....not sure" )', 'print( f"\\file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', '', 'print( "\\path_resolve is ....not sure" )', 'print( f"\\npath_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:52:08,612 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:53:32,876 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path is all or part of file name as a path object" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\path_name is stem plus the extension: the full base or short name" )', 'print( f"\\path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\path_anchor is ....not sure" )', 'print( f"\\file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', '', 'print( "\\path_resolve is ....not sure" )', 'print( f"\\npath_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:53:32,876 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:54:28,261 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path is all or part of file name as a path object" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\path_name is stem plus the extension: the full base or short name" )', 'print( f"\\path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\path_anchor is ....not sure" )', 'print( f"\\file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', '', 'print( "\\path_resolve is ....not sure" )', 'print( f"\\npath_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', 'print( f"\\nUp ad dir file_path.resolve = {  Path( \'../\' ).resolve()   }" )', '', '']
2025-04-18 09:54:28,261 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:56:13,189 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path is all or part of file name as a path object" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"\\path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"\\path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"\\file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings" )', 'print( "\\path_resolve is ....not sure" )', 'print( f"\\npath_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', '', '']
2025-04-18 09:56:13,190 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 09:57:03,745 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path is all or part of file name as a path object" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings" )', 'print( "\\npath_resolve is ....not sure" )', 'print( f"\\path_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', '', '']
2025-04-18 09:57:03,745 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:07:51,475 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:07:51,475 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:07:51,477 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 10:07:51,478 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:07:51,478 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:07:51,547 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 10:07:51,549 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:08:41,560 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings" )', 'print( "\\npath_resolve is ....not sure" )', 'print( f"\\path_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', '', '', '']
2025-04-18 10:08:41,561 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:08:55,678 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings" )', 'print( "\\npath_resolve is ....not sure" )', 'print( f"\\path_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '', '']
2025-04-18 10:08:55,678 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:09:56,417 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings" )', 'print( "\\npath_resolve is ....not sure" )', 'print( f"\\path_resolve = {  file_path.resolve()  =  } {type( file_path.anchor ) }" )', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '', '']
2025-04-18 10:09:56,418 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:11:30,789 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ....not sure" )', 'print( f"\\path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) }" )', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '', '']
2025-04-18 10:11:30,789 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:12:08,765 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"\\path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) }" )', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '', '']
2025-04-18 10:12:08,765 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:12:30,364 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "./mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"\\path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '', '']
2025-04-18 10:12:30,365 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:14:55,169 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '', '']
2025-04-18 10:14:55,170 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:15:41,071 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '', '']
2025-04-18 10:15:41,071 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:17:20,638 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '', '']
2025-04-18 10:17:20,638 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:17:38,428 - DEBUG - ['>>Py -------- org file name starts from root   -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', '#file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '', '']
2025-04-18 10:17:38,429 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:19:15,351 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:19:15,351 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:19:15,352 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 10:19:15,353 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:19:15,353 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:19:15,451 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 10:19:15,452 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:19:16,568 - DEBUG - ['>>Py -------- make a path absolute', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', '#file_name                            = "./sql/db_create.py"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'file_path.resolve()', '']
2025-04-18 10:19:16,568 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'make', 'a', 'path', 'absolute']
2025-04-18 10:19:28,606 - DEBUG - ['>>Py -------- make a path absolute', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'file_path.resolve()', '']
2025-04-18 10:19:28,606 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'make', 'a', 'path', 'absolute']
2025-04-18 10:20:17,575 - DEBUG - ['>>Py -------- make a path absolute', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '']
2025-04-18 10:20:17,575 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'make', 'a', 'path', 'absolute']
2025-04-18 10:21:31,027 - DEBUG - ['>>Py -------- make a path absolute', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', 'path_resolve =   file_path.resolve', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  }  " )', 'print( f"is_absolute = {  path_resolve.is_absolute()  =  }  " )', '']
2025-04-18 10:21:31,028 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'make', 'a', 'path', 'absolute']
2025-04-18 10:21:47,008 - DEBUG - ['>>Py -------- make a path absolute', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', 'path_resolve =   file_path.resolve', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  }  " )', 'print( f"is_absolute = {  path_resolve.is_absolute()  =  }  " )', '']
2025-04-18 10:21:47,009 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'make', 'a', 'path', 'absolute']
2025-04-18 10:22:01,138 - DEBUG - ['>>Py -------- make a path absolute', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', 'path_resolve =   file_path.resolve()', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  }  " )', 'print( f"is_absolute = {  path_resolve.is_absolute()  =  }  " )', '']
2025-04-18 10:22:01,139 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'make', 'a', 'path', 'absolute']
2025-04-18 10:22:45,914 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:22:45,915 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:22:45,918 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 10:22:45,920 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:22:45,921 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:22:45,993 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 10:22:45,993 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:23:13,920 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:23:13,921 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:23:13,925 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 10:23:13,928 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:23:13,929 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:23:13,929 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 10:23:13,931 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:23:19,379 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "shutil" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 1  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-18 10:23:19,382 - DEBUG - Executing SQL query: query_exec_model query.executedQuery() = 'SELECT   help_info.id,  help_info.title,  help_info.system, help_info.key_words    FROM help_info  \n    INNER JOIN  help_key_word  ON help_info.id = help_key_word.id  \n    WHERE  key_word IN ( "shutil" )   \n    GROUP BY   help_info.id,  help_info.title,  help_info.system, help_info.key_words  \n    HAVING  count(*) >= 1  \n     ORDER BY  lower(help_info.title) ASC  '
2025-04-18 10:23:21,809 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:23:21,809 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:23:21,813 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 10:23:21,816 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:23:21,816 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:23:21,817 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 10:23:21,819 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:23:21,820 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 10:23:21,830 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 10:23:21,830 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 10:23:21,831 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 10:27:18,053 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:27:18,053 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:27:18,056 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 10:27:18,058 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:27:18,058 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:27:18,140 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 10:27:18,141 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:28:46,922 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:28:46,922 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:28:46,924 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 10:28:46,925 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:28:46,925 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:28:46,926 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 10:28:46,926 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:28:46,926 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 10:28:46,931 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 10:28:46,932 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 10:28:46,932 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 10:28:50,784 - DEBUG - set_history_to_detail_ix  new_list_ix = 1 
2025-04-18 10:28:50,784 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:28:50,784 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:28:50,785 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_info' 
2025-04-18 10:28:50,786 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:28:50,786 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:28:50,786 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8018' self.table_name = 'help_text' 
2025-04-18 10:28:50,787 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:28:50,787 - DEBUG - next_history_to_detail  try to get db_key  new_list_ix = 1,  id_data = 8470
2025-04-18 10:28:50,787 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 10:28:50,788 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 10:28:50,788 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 10:28:50,788 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 10:28:51,698 - DEBUG - set_history_to_detail_ix  new_list_ix = 2 
2025-04-18 10:28:51,698 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:28:51,699 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:28:51,700 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8470' self.table_name = 'help_info' 
2025-04-18 10:28:51,702 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:28:51,702 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:28:51,702 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8470' self.table_name = 'help_text' 
2025-04-18 10:28:51,703 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:28:51,703 - DEBUG - next_history_to_detail  try to get db_key  new_list_ix = 2,  id_data = 8010
2025-04-18 10:28:51,704 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 10:28:51,717 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 10:28:51,717 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 10:28:51,718 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 10:29:03,736 - DEBUG - ['>>Py -------- org file name starts from root  or not -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', '#file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '']
2025-04-18 10:29:03,737 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', 'or', 'not', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:30:05,984 - DEBUG - ['>>Py -------- org file name starts from root  or not -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '']
2025-04-18 10:30:05,986 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', 'or', 'not', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:31:14,027 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:31:14,028 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:31:14,029 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 10:31:14,030 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:31:14,030 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:31:14,101 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 10:31:14,103 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:32:15,939 - DEBUG - ['>>Py -------- org file name starts from root  or not -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path as in the string, not fully from top if string was not might want to resolve first" )', 'print( "Path -> Path )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '']
2025-04-18 10:32:15,939 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', 'or', 'not', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:32:28,402 - DEBUG - ['>>Py -------- org file name starts from root  or not -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path as in the string, not fully from top if string was not might want to resolve first" )', 'print( "Path -> Path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '']
2025-04-18 10:32:28,403 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', 'or', 'not', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:32:58,506 - DEBUG - ['>>Py -------- org file name starts from root  or not -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'file_path                              = Path( file_name )', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"\\path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path as in the string, not fully from top if string was not might want to resolve first" )', 'print( "Path -> Path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '']
2025-04-18 10:32:58,507 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', 'or', 'not', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:34:46,645 - DEBUG - ['>>Py -------- org file name starts from root  or not -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'print( "str -> Path" )', 'file_path                              = Path( file_name )', 'path_file_name                   = Path( file_name ) # this is preferred delete file_path', '', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( f"path_suffix           = {file_path.suffix = }         {type(file_path.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path as in the string, not fully from top if string was not might want to resolve first" )', 'print( "Path -> Path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '']
2025-04-18 10:34:46,645 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', 'or', 'not', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:35:54,372 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:35:54,373 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:35:54,374 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 10:35:54,374 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:35:54,374 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:35:54,449 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 10:35:54,449 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:35:56,300 - DEBUG - ['>>Py -------- org file name starts from root  or not -- create file path from a string file_name, and see parts and more', 'print( "work on naming conventions" )', 'from   pathlib import Path', '', 'file_name                            = "/mnt/WIN_D/PhotosRaw/2014/Foundry/DSCN2357.JPG"', 'file_name                            = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/sql/db_create.py"', 'file_name                            = "./sql/db_create.py"', '', 'print( "\\npath_file_name or path or Absolute path is all or part of file name as a path object depending on the string" )', 'print( "str -> Path" )', 'file_path                              = Path( file_name )', 'path_file_name                   = Path( file_name ) # this is preferred delete file_path', '', 'print( f"path_file_name       = {Path( file_name ) = }       {type(file_path) }" )', '', 'print( "\\n---- Next are all peices that ar strings" )', 'print( "\\npath_suffix same as extension   \'DSCN2357\'  " )', 'print( "Path -> str" )', 'print( f"path_suffix           = {path_file_name.suffix = }         {type(path_file_name.suffix) }" )', '', 'print( "\\npath_stem same as base or short name without extension" )', 'print( f"path_stem   = {file_path.stem = }               {type(file_path.suffix) }" )', '', 'print( "\\npath_name is stem plus the extension: the full base or short name" )', 'print( f"path_name = {  file_path.name =  }              {type( file_path.name ) }" )', '', 'print( "\\npath_parent is ....not sure" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_anchor is ....not sure" )', 'print( f"file_path.anchor = {  file_path.anchor  =  }  {type( file_path.anchor ) }" )', '', 'print( "\\n---- Next end of strings -- path like parts" )', '', 'print( "\\npath_parent is ....path from top as path as in the string, not fully from top if string was not might want to resolve first" )', 'print( "Path -> Path" )', 'print( f"file_path.parent = {  file_path.parent =  }  {type( file_path.parent ) }" )', '', 'print( "\\npath_resolve is ...." )', 'print( f"path_resolve = {  file_path.resolve()  =  } {type( file_path.resolve( ) ) }" )', '', 'print( "\\npath. is_absolute ...." )', 'print( f"is_absolute = {  file_path.is_absolute()  =  } {type( file_path.is_absolute( ) ) }" )', '', '', 'more   = """', 'p.parent: Returns the parent directory as a Path object.', "p.parts: Returns a tuple of path components (e.g., ('/', 'home', 'user', 'documents')).", 'p.is_absolute(): Returns True if the path is absolute.', 'p.exists(): Returns True if the path exists.', 'p.is_file(): Returns True if the path points to a file.', 'p.is_dir(): Returns True if the path points to a directory.', '', '"""', 'print( more )', '']
2025-04-18 10:35:56,301 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'org', 'file', 'name', 'starts', 'from', 'root', 'or', 'not', '--', 'create', 'file', 'path', 'from', 'a', 'string', 'file_name,', 'and', 'see', 'parts', 'and', 'more']
2025-04-18 10:39:15,959 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:39:15,960 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:39:15,963 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 10:39:15,967 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:39:15,968 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:39:15,968 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 10:39:15,970 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:39:15,970 - DEBUG - DocumentBase new_record first validate, then save, wait for except then go on save removed 
2025-04-18 10:39:15,971 - DEBUG - new_record change self.detail_tab.default_new_row( next_key ) 
2025-04-18 10:39:15,971 - DEBUG - Detail_Tab_Base new_record next_key = None   option ='default' update.db
2025-04-18 10:39:15,972 - DEBUG - DataManager new_record    help_info  should we create the record here ??
2025-04-18 10:39:16,290 - DEBUG - DataManager new_record time stuff may be lost  self.table_name = 'help_info' 
2025-04-18 10:39:16,290 - DEBUG - new_record need to fix up the picture tab if any or does document do it ??
2025-04-18 10:39:16,291 - DEBUG - DataManager new_record    help_text  should we create the record here ??
2025-04-18 10:39:16,293 - DEBUG - DataManager new_record time stuff may be lost  self.table_name = 'help_text' 
2025-04-18 10:39:16,293 - DEBUG - new_record need to fix up the picture tab if any or does document do it ??
2025-04-18 10:39:16,294 - DEBUG - Detail_Tab_Base clear out sub tabs?? !!
2025-04-18 10:45:56,156 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:45:56,157 - Level 25 - document_manager update_new_record_v3  self.table_name  = 'help_info' 
2025-04-18 10:45:56,157 - Level 25 - 
Info About >>>> update_new_record_v3 after filter to empty 
object is instance of <class 'PyQt5.QtSql.QSqlTableModel'> and type <class 'PyQt5.QtSql.QSqlTableModel'>
>>>>>>>>>>    ><PyQt5.QtSql.QSqlTableModel object at 0x7f34d619ea80><
custom_info for a QSqlTableModel 
    tableName()         = help_info
    rowCount()          = 0
    database().databaseName()          = /mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/data/python_ex.db
    model.isDirty()     = False
    model.filter()      = id = 8714
    rows....
    For a record .. anything new here -- columns differ 
    ix_col = 0:     new_record.fieldName( ix_col ) = 'id' 
    ix_col = 1:     new_record.fieldName( ix_col ) = 'id_old' 
    ix_col = 2:     new_record.fieldName( ix_col ) = 'type' 
    ix_col = 3:     new_record.fieldName( ix_col ) = 'sub_system' 
    ix_col = 4:     new_record.fieldName( ix_col ) = 'system' 
    ix_col = 5:     new_record.fieldName( ix_col ) = 'key_words' 
    ix_col = 6:     new_record.fieldName( ix_col ) = 'edit_ts' 
    ix_col = 7:     new_record.fieldName( ix_col ) = 'table_name' 
    ix_col = 8:     new_record.fieldName( ix_col ) = 'column_name' 
    ix_col = 9:     new_record.fieldName( ix_col ) = 'java_type' 
    ix_col = 10:     new_record.fieldName( ix_col ) = 'java_name' 
    ix_col = 11:     new_record.fieldName( ix_col ) = 'java_package' 
    ix_col = 12:     new_record.fieldName( ix_col ) = 'title' 
    ix_col = 13:     new_record.fieldName( ix_col ) = 'is_example' 
    ix_col = 14:     new_record.fieldName( ix_col ) = 'can_execute' 
    i_name = 'id':  new_record.indexOf( i_name ) = 0 
    i_name = 'id_old':  new_record.indexOf( i_name ) = 1 
    i_name = 'type':  new_record.indexOf( i_name ) = 2 
    i_name = 'sub_system':  new_record.indexOf( i_name ) = 3 
    i_name = 'system':  new_record.indexOf( i_name ) = 4 
    i_name = 'key_words':  new_record.indexOf( i_name ) = 5 
    i_name = 'edit_ts':  new_record.indexOf( i_name ) = 6 
    i_name = 'table_name':  new_record.indexOf( i_name ) = 7 
    i_name = 'column_name':  new_record.indexOf( i_name ) = 8 
    i_name = 'java_type':  new_record.indexOf( i_name ) = 9 
    i_name = 'java_name':  new_record.indexOf( i_name ) = 10 
    i_name = 'java_package':  new_record.indexOf( i_name ) = 11 
    i_name = 'title':  new_record.indexOf( i_name ) = 12 
    i_name = 'is_example':  new_record.indexOf( i_name ) = 13 
    i_name = 'can_execute':  new_record.indexOf( i_name ) = 14 
2025-04-18 10:45:56,158 - Level 25 - update_new_record_v3 prior to insertRecord {model.rowCount() = } 
2025-04-18 10:45:56,233 - Level 25 - update_new_record_v3 post to insertRecord {model.rowCount() = } 
2025-04-18 10:45:56,233 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_new_record_v3   self.current_id = 8714 self.table_name = 'help_info' self.record_state = 2
2025-04-18 10:45:56,233 - Level 25 - 
update_new_record_v3 at very end 
2025-04-18 10:45:56,628 - Level 25 - document_manager update_new_record_v3  self.table_name  = 'help_text' 
2025-04-18 10:45:56,628 - Level 25 - 
Info About >>>> update_new_record_v3 after filter to empty 
object is instance of <class 'PyQt5.QtSql.QSqlTableModel'> and type <class 'PyQt5.QtSql.QSqlTableModel'>
>>>>>>>>>>    ><PyQt5.QtSql.QSqlTableModel object at 0x7f34d619eb10><
custom_info for a QSqlTableModel 
    tableName()         = help_text
    rowCount()          = 0
    database().databaseName()          = /mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/data/python_ex.db
    model.isDirty()     = False
    model.filter()      = id = 8714
    rows....
    For a record .. anything new here -- columns differ 
    ix_col = 0:     new_record.fieldName( ix_col ) = 'id' 
    ix_col = 1:     new_record.fieldName( ix_col ) = 'id_old' 
    ix_col = 2:     new_record.fieldName( ix_col ) = 'text_data' 
    i_name = 'id':  new_record.indexOf( i_name ) = 0 
    i_name = 'id_old':  new_record.indexOf( i_name ) = 1 
    i_name = 'text_data':  new_record.indexOf( i_name ) = 2 
2025-04-18 10:45:56,628 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:45:56,628 - Level 25 - update_new_record_v3 prior to insertRecord {model.rowCount() = } 
2025-04-18 10:45:56,689 - Level 25 - update_new_record_v3 post to insertRecord {model.rowCount() = } 
2025-04-18 10:45:56,690 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_new_record_v3   self.current_id = 8714 self.table_name = 'help_text' self.record_state = 2
2025-04-18 10:45:56,690 - Level 25 - 
update_new_record_v3 at very end 
2025-04-18 10:45:56,690 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:45:57,711 - DEBUG - ['>>Py -------- what db are we running??', '', 'import from   app_global import AppGlobal', 'print( f"{ AppGlobal.parameters.db_file_name = }" )', '']
2025-04-18 10:45:57,712 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'what', 'db', 'are', 'we', 'running??']
2025-04-18 10:46:16,468 - DEBUG - ['>>Py -------- what db are we running??', '', 'from   app_global import AppGlobal', 'print( f"{ AppGlobal.parameters.db_file_name = }" )', '']
2025-04-18 10:46:16,469 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'what', 'db', 'are', 'we', 'running??']
2025-04-18 10:46:22,628 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:46:22,629 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:46:22,630 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8714' self.table_name = 'help_info' 
2025-04-18 10:46:22,630 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:46:22,631 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:46:22,701 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8714' self.table_name = 'help_text' 
2025-04-18 10:46:22,701 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:47:10,777 - DEBUG - ['>>Py -------- what db are we running??', 'from   app_global import AppGlobal', '', 'print( "this is for the stuffdb application" )', '', 'print( f"{ AppGlobal.parameters.db_file_name = }" )', '']
2025-04-18 10:47:10,777 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['--------', 'what', 'db', 'are', 'we', 'running??']
2025-04-18 10:47:17,639 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:47:17,639 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:47:17,717 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8714' self.table_name = 'help_info' 
2025-04-18 10:47:18,351 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:47:18,351 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:47:18,732 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8714' self.table_name = 'help_text' 
2025-04-18 10:47:18,734 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:59:13,658 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:59:13,659 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:59:13,663 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8714' self.table_name = 'help_info' 
2025-04-18 10:59:13,666 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 10:59:13,667 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 10:59:13,667 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8714' self.table_name = 'help_text' 
2025-04-18 10:59:13,669 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 10:59:13,670 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 10:59:13,684 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 10:59:13,684 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 10:59:13,685 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 11:03:14,658 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 11:03:14,658 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:03:14,659 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 11:03:14,660 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:03:14,660 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 11:03:14,910 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 11:03:14,911 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 11:03:19,306 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 11:03:19,306 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:03:19,307 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 11:03:19,308 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:03:19,308 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 11:03:19,309 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 11:03:19,309 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 11:03:19,309 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 11:03:19,313 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 11:03:19,314 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 11:03:19,314 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 11:03:36,026 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 11:03:36,026 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:03:36,027 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_info' 
2025-04-18 11:03:36,028 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:03:36,028 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 11:03:36,028 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8010' self.table_name = 'help_text' 
2025-04-18 11:03:36,028 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 11:03:36,028 - DEBUG - base document select_record  first validate, then save, wait for except then go on ?? 
2025-04-18 11:03:36,032 - DEBUG - set_prepped_data error a_string, not a string self.field_name = 'id'  return for now inspect then break
2025-04-18 11:03:36,032 - ERROR - send_topic_update needs fixing !! just reenabled 
2025-04-18 11:03:36,032 - DEBUG -  send_topic_update  <<<<<<<<< self.tab_name = 'HelpDetailTab'  <<<<<<<<<<<<<<<<<<<<  self.enable_send_topic_update = False 
2025-04-18 11:12:32,101 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 11:12:32,101 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:12:32,104 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 11:12:32,106 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:12:32,106 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 11:12:32,182 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 11:12:32,182 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 11:12:35,289 - DEBUG - ['>>Py ---- example move a file with Path', 'from pathlib import Path', '', 'file_name_src         = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_1/file_to_move.txt"', 'file_name_dest       = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_2/file_to_move.txt"', '', 'path_file_name_src    =  Path( file_name_src )', 'path_file_name_dest  =  Path( file_name_dest )', '', 'if path_file_name_dest.exists():', '    print( "reversing src and dest"', '    path_file_name_src,    path_file_name_dest  = path_file_name_dest, path_file_name_src', '', 'print( f"a_python_template { 0 = }" )', '']
2025-04-18 11:12:35,290 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['----', 'example', 'move', 'a', 'file', 'with', 'Path']
2025-04-18 11:12:46,303 - DEBUG - ['>>Py ---- example move a file with Path', 'from pathlib import Path', '', 'file_name_src         = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_1/file_to_move.txt"', 'file_name_dest       = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_2/file_to_move.txt"', '', 'path_file_name_src    =  Path( file_name_src )', 'path_file_name_dest  =  Path( file_name_dest )', '', 'if path_file_name_dest.exists():', '    print( "reversing src and dest" )', '    path_file_name_src,    path_file_name_dest  = path_file_name_dest, path_file_name_src', '', 'print( f"a_python_template { 0 = }" )', '']
2025-04-18 11:12:46,304 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['----', 'example', 'move', 'a', 'file', 'with', 'Path']
2025-04-18 11:13:45,914 - DEBUG - ['>>Py ---- example move a file with Path', 'from pathlib import Path', '', 'file_name_src         = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_1/file_to_move.txt"', 'file_name_dest       = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_2/file_to_move.txt"', '', 'path_file_name_src    =  Path( file_name_src )', 'path_file_name_dest  =  Path( file_name_dest )', '', 'if path_file_name_dest.exists():', '    print( "reversing src and dest" )', '    path_file_name_src,    path_file_name_dest  = path_file_name_dest, path_file_name_src', '', 'if not path_file_name_src.exists():', '    print( "no src file" )', '    1/0', '', 'print( f"a_python_template { 0 = }" )', '']
2025-04-18 11:13:45,915 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['----', 'example', 'move', 'a', 'file', 'with', 'Path']
2025-04-18 11:37:40,158 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 11:37:40,159 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:37:40,162 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 11:37:40,166 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 11:37:40,166 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 11:37:40,245 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 11:37:40,246 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 12:25:50,165 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 12:25:50,165 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 12:25:50,167 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 12:25:50,169 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 12:25:50,169 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 12:25:50,584 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 12:25:50,585 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 12:25:53,894 - DEBUG - ['>>Py ---- example move a file with Path', 'from   pathlib import Path', 'import shutil', '', 'file_name_src         = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_1/file_to_move.txt"', 'file_name_dest       = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_2/file_to_move.txt"', '', 'path_file_name_src    =  Path( file_name_src )', 'path_file_name_dest  =  Path( file_name_dest )', '', 'if path_file_name_dest.exists():', '    print( "reversing src and dest" )', '    path_file_name_src,    path_file_name_dest  = path_file_name_dest, path_file_name_src', '', 'if not path_file_name_src.exists():', '    print( "no src file" )', '    1/0', '', 'shutil.move( path_file_name_src, path_file_name_dest,  )  # copy_function=copy2 the default)', '', '', '#print( f"a_python_template { 0 = }" )', '']
2025-04-18 12:25:53,894 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['----', 'example', 'move', 'a', 'file', 'with', 'Path']
2025-04-18 12:26:03,525 - DEBUG - ['>>Py ---- example move a file with Path', 'from   pathlib import Path', 'import shutil', '', 'file_name_src         = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_1/file_to_move.txt"', 'file_name_dest       = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_2/file_to_move.txt"', '', 'path_file_name_src    =  Path( file_name_src )', 'path_file_name_dest  =  Path( file_name_dest )', '', 'if path_file_name_dest.exists():', '    print( "reversing src and dest" )', '    path_file_name_src,    path_file_name_dest  = path_file_name_dest, path_file_name_src', '', 'if not path_file_name_src.exists():', '    print( "no src file" )', '    1/0', '', 'shutil.move( path_file_name_src, path_file_name_dest,  )  # copy_function=copy2 the default)', '', '', '#print( f"a_python_template { 0 = }" )', '']
2025-04-18 12:26:03,526 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['----', 'example', 'move', 'a', 'file', 'with', 'Path']
2025-04-18 12:26:08,814 - DEBUG - ['>>Py ---- example move a file with Path', 'from   pathlib import Path', 'import shutil', '', 'file_name_src         = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_1/file_to_move.txt"', 'file_name_dest       = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_2/file_to_move.txt"', '', 'path_file_name_src    =  Path( file_name_src )', 'path_file_name_dest  =  Path( file_name_dest )', '', 'if path_file_name_dest.exists():', '    print( "reversing src and dest" )', '    path_file_name_src,    path_file_name_dest  = path_file_name_dest, path_file_name_src', '', 'if not path_file_name_src.exists():', '    print( "no src file" )', '    1/0', '', 'shutil.move( path_file_name_src, path_file_name_dest,  )  # copy_function=copy2 the default)', '', '', '#print( f"a_python_template { 0 = }" )', '']
2025-04-18 12:26:08,814 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['----', 'example', 'move', 'a', 'file', 'with', 'Path']
2025-04-18 12:26:15,569 - DEBUG - ['>>Py ---- example move a file with Path', 'from   pathlib import Path', 'import shutil', '', 'file_name_src         = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_1/file_to_move.txt"', 'file_name_dest       = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_2/file_to_move.txt"', '', 'path_file_name_src    =  Path( file_name_src )', 'path_file_name_dest  =  Path( file_name_dest )', '', 'if path_file_name_dest.exists():', '    print( "reversing src and dest" )', '    path_file_name_src,    path_file_name_dest  = path_file_name_dest, path_file_name_src', '', 'if not path_file_name_src.exists():', '    print( "no src file" )', '    1/0', '', 'shutil.move( path_file_name_src, path_file_name_dest,  )  # copy_function=copy2 the default)', '', '', '#print( f"a_python_template { 0 = }" )', '']
2025-04-18 12:26:15,570 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['----', 'example', 'move', 'a', 'file', 'with', 'Path']
2025-04-18 12:27:20,136 - DEBUG - ['>>Py ---- example move a file with Path', 'from   pathlib import Path', 'import shutil', '', 'file_name_src         = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_1/file_to_move.txt"', 'file_name_dest       = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_2/file_to_move.txt"', '', 'path_file_name_src    =  Path( file_name_src )', 'path_file_name_dest  =  Path( file_name_dest )', '', 'if path_file_name_dest.exists():', '    print( "reversing src and dest" )', '    path_file_name_src,    path_file_name_dest  = path_file_name_dest, path_file_name_src', '', 'if not path_file_name_src.exists():', '    print( "no src file" )', '    1/0', '', 'print( f"moving {path_file_name_src} to {path_file_name_dest} " )', 'shutil.move( path_file_name_src, path_file_name_dest,  )  # copy_function=copy2 the default)', '', '', '#print( f"a_python_template { 0 = }" )', '']
2025-04-18 12:27:20,137 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['----', 'example', 'move', 'a', 'file', 'with', 'Path']
2025-04-18 12:27:49,358 - DEBUG - ['>>Py ---- example move a file with Path', 'from   pathlib import Path', 'import shutil', '', 'file_name_src         = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_1/file_to_move.txt"', 'file_name_dest       = "/mnt/WIN_D/russ/0000/python00/python3/_projects/stuffdb/scratch/subdir_2/file_to_move.txt"', '', 'path_file_name_src    =  Path( file_name_src )', 'path_file_name_dest  =  Path( file_name_dest )', '', 'if path_file_name_dest.exists():', '    print( "reversing src and dest" )', '    path_file_name_src,    path_file_name_dest  = path_file_name_dest, path_file_name_src', '', 'if not path_file_name_src.exists():', '    print( "no src file" )', '    1/0', '', 'print( f"moving \\n    {path_file_name_src} to \\n    {path_file_name_dest} " )', 'shutil.move( path_file_name_src, path_file_name_dest,  )  # copy_function=copy2 the default)', '', '', '#print( f"a_python_template { 0 = }" )', '']
2025-04-18 12:27:49,358 - DEBUG - cmd_exec cmd = 'py' 
 cmd_args = ['----', 'example', 'move', 'a', 'file', 'with', 'Path']
2025-04-18 12:28:25,465 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 12:28:25,466 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 12:28:25,467 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 12:28:25,467 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 12:28:25,467 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 12:28:25,545 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 12:28:25,545 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
2025-04-18 12:36:22,985 - INFO - Document Base   validate....   done for self.subwindow_name = 'HelpSubWindow'
2025-04-18 12:36:22,985 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 12:36:22,986 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_info' 
2025-04-18 12:36:22,987 - Level 25 - update_record_fetched  self.record_state  = 1
2025-04-18 12:36:22,987 - Level 25 - field_to_record i_field.field_name = 'text_data' 
2025-04-18 12:36:22,987 - Level 25 - data_manager   model_submit_all submitAll ok: DataManager.update_record_fetched_v1 id_value = '8713' self.table_name = 'help_text' 
2025-04-18 12:36:22,988 - DEBUG - HelpDocument.update_db  >>> for self.subwindow_name = 'HelpSubWindow'
